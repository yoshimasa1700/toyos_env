;; Object cedet/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "cedet/"
  :tables
  (list
    (semanticdb-table "cedet-m3.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/util-modes" include nil nil [1238 1268])
            ("semantic/senator" include nil nil [1269 1296])
            ("if" code nil nil [1328 1547])
            ("global-cedet-m3-minor-mode" variable nil nil [1550 1835])
            ("cedet-m3-minor-mode" variable nil nil [1837 1927])
            ("make-variable-buffer-local" code nil nil [1928 1977])
            ("cedet-m3-minor-mode-hook" variable nil nil [1979 2115])
            ("cedet-m3-prefix-key" variable (:default-value (if (featurep (quote xemacs)) [button3] [mouse-3])) nil [2117 2243])
            ("cedet-m3-minor-menu" variable nil nil [2245 2325])
            ("cedet-m3-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) (define-key km cedet-m3-prefix-key (quote cedet-m3-menu)) km)) nil [2327 2536])
            ("cedet-m3-hack-map" variable (:default-value (make-sparse-keymap)) nil [2538 2628])
            ("define-minor-mode" code nil nil [2645 3149])
            ("semantic-add-minor-mode" code nil nil [3151 3202])
            ("define-minor-mode" code nil nil [3219 3545])
            ("cedet-m3-menu" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [3574 4350])
            ("cedet-m3-menu-kbd" function (:user-visible-flag t) nil [4352 4603])
            ("cedet-m3-menu-query-hooks" variable nil nil [4653 4840])
            ("cedet-m3-menu-visit-hooks" variable nil nil [4842 5037])
            ("cedet-m3-menu-completions-hooks" variable nil nil [5039 5235])
            ("cedet-m3-menu-do-hooks" variable nil nil [5237 5422])
            ("cedet-m3-menu-item" function (:arguments ("itemname" "function" "attributes")) nil [5424 5844])
            ("cedet-m3-create-menu" function nil nil [5846 6585])
            ("cedet-m3" package nil nil [6587 6606]))          
      :file "cedet-m3.el"
      :pointmax 6634
      :fsize 6633
      :lastmodtime '(20580 44388 0 0)
      :unmatched-syntax '((close-paren 1547 . 1548) (symbol 1309 . 1325) (open-paren 1308 . 1309)))
    (semanticdb-table "ede.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cedet" include nil nil [1479 1495])
            ("eieio" include nil nil [1496 1512])
            ("eieio-speedbar" include nil nil [1513 1538])
            ("ede/source" include nil nil [1539 1560])
            ("ede/base" include nil nil [1561 1580])
            ("ede/auto" include nil nil [1581 1600])
            ("load" code nil nil [1602 1638])
            ("declare-function" code nil nil [1640 1690])
            ("declare-function" code nil nil [1691 1738])
            ("declare-function" code nil nil [1739 1800])
            ("declare-function" code nil nil [1801 1871])
            ("declare-function" code nil nil [1872 1926])
            ("declare-function" code nil nil [1927 1991])
            ("declare-function" code nil nil [1992 2056])
            ("declare-function" code nil nil [2057 2099])
            ("declare-function" code nil nil [2100 2151])
            ("declare-function" code nil nil [2152 2199])
            ("declare-function" code nil nil [2200 2265])
            ("ede-version" variable
               (:constant-flag t
                :default-value "1.2")
                nil [2267 2333])
            ("ede-version" function (:user-visible-flag t) nil [2345 2462])
            ("ede" customgroup (:user-visible-flag t) nil [2464 2554])
            ("ede-auto-add-method" variable (:default-value (quote ask)) nil [2556 3305])
            ("ede-debug-program-function" variable (:default-value (quote gdb)) nil [3307 3428])
            ("ede-project-directories" variable nil nil [3472 4294])
            ("ede-directory-safe-p" function (:arguments ("dir")) nil [4296 4960])
            ("ede-projects" variable nil nil [4990 5076])
            ("ede-object-root-project" variable nil nil [5078 5257])
            ("make-variable-buffer-local" code nil nil [5258 5311])
            ("ede-object-project" variable nil nil [5313 5491])
            ("make-variable-buffer-local" code nil nil [5492 5540])
            ("ede-object" variable nil nil [5542 5676])
            ("make-variable-buffer-local" code nil nil [5677 5717])
            ("ede-selected-object" variable nil nil [5719 5869])
            ("ede-constructing" variable nil nil [5871 6055])
            ("ede-deep-rescan" variable nil nil [6057 6220])
            ("ede-singular-object" function (:arguments ("prompt")) nil [6241 6428])
            ("ede-choose-object" function (:arguments ("prompt" "list-o-o")) nil [6430 6743])
            ("ede-minor-mode-map" variable (:default-value (let ((map (make-sparse-keymap)) (pmap (make-sparse-keymap))) (define-key pmap "e" (quote ede-edit-file-target)) (define-key pmap "a" (quote ede-add-file)) (define-key pmap "d" (quote ede-remove-file)) (define-key pmap "t" (quote ede-new-target)) (define-key pmap "g" (quote ede-rescan-toplevel)) (define-key pmap "s" (quote ede-speedbar)) (define-key pmap "f" (quote ede-find-file)) (define-key pmap "C" (quote ede-compile-project)) (define-key pmap "c" (quote ede-compile-target)) (define-key pmap "" (quote ede-compile-selected)) (define-key pmap "D" (quote ede-debug-target)) (define-key pmap "R" (quote ede-run-target)) (define-key map "." pmap) map)) nil [6767 7504])
            ("global-ede-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [menu-bar cedet-menu] (cons "Development" cedet-menu-map)) map)) nil [7506 7702])
            ("define-key" code nil nil [7749 7898])
            ("define-key" code nil nil [7899 8040])
            ("define-key" code nil nil [8041 8140])
            ("define-key" code nil nil [8141 8282])
            ("define-key" code nil nil [8283 8451])
            ("define-key" code nil nil [8452 8624])
            ("define-key" code nil nil [8625 8821])
            ("ede-buffer-belongs-to-target-p" function nil nil [8823 9046])
            ("ede-buffer-belongs-to-project-p" function nil nil [9048 9262])
            ("ede-menu-obj-of-class-p" function (:arguments ("class")) nil [9264 9520])
            ("ede-build-forms-menu" function (:arguments ("menu-def")) nil [9522 10968])
            ("ede-target-forms-menu" function (:arguments ("menu-def")) nil [10970 11623])
            ("ede-project-forms-menu" function (:arguments ("menu-def")) nil [11625 12471])
            ("ede-configuration-forms-menu" function (:arguments ("menu-def")) nil [12473 13193])
            ("ede-project-configurations-set" function
               (:user-visible-flag t
                :arguments ("newconfig"))
                nil [13195 13794])
            ("ede-customize-forms-menu" function (:arguments ("menu-def")) nil [13796 14513])
            ("ede-apply-object-keymap" function (:arguments ("default")) nil [14516 15212])
            ("ede-menu-items-build" function
               (:parent "ede-project"
                :arguments ("obj" "current"))
                nil [15256 15639])
            ("ede-menu-items-build" function
               (:parent "ede-target"
                :arguments ("obj" "current"))
                nil [15641 16011])
            ("ede-dired-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [16059 16130])
            ("ede-apply-target-options" function nil nil [16133 16384])
            ("ede-turn-on-hook" function nil nil [16386 16776])
            ("define-minor-mode" code nil nil [16778 17519])
            ("ede-initialize-state-current-buffer" function nil nil [17521 19044])
            ("ede-reset-all-buffers" function (:user-visible-flag t) nil [19046 19474])
            ("define-minor-mode" code nil nil [19491 21073])
            ("ede-ignored-file-alist" variable (:default-value (quote ("\\.cvsignore$" "\\.#" "~$"))) nil [21075 21217])
            ("ede-ignore-file" function (:arguments ("filename")) nil [21219 21452])
            ("ede-auto-add-to-target" function nil nil [21454 23075])
            ("ede" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [23117 24907])
            ("ede-check-project-directory" function (:arguments ("dir")) nil [24909 25980])
            ("ede-new" function
               (:user-visible-flag t
                :arguments ("type" "name"))
                nil [25982 28870])
            ("ede-add-subproject" function
               (:parent "ede-project"
                :arguments ("proj-a" "proj-b"))
                nil [28872 29036])
            ("ede-invoke-method" function (:arguments ("sym" "args")) nil [29038 29443])
            ("ede-rescan-toplevel" function (:user-visible-flag t) nil [29445 29892])
            ("ede-new-target" function
               (:user-visible-flag t
                :arguments ("args"))
                nil [29894 30464])
            ("ede-new-target-custom" function (:user-visible-flag t) nil [30466 30629])
            ("ede-delete-target" function
               (:user-visible-flag t
                :arguments ("target"))
                nil [30631 31279])
            ("ede-add-file" function
               (:user-visible-flag t
                :arguments ("target"))
                nil [31281 32106])
            ("ede-remove-file" function
               (:user-visible-flag t
                :arguments ("force"))
                nil [32108 32770])
            ("ede-edit-file-target" function (:user-visible-flag t) nil [32772 32936])
            ("ede-compile-project" function (:user-visible-flag t) nil [32938 33279])
            ("ede-compile-selected" function
               (:user-visible-flag t
                :arguments ("target"))
                nil [33281 33510])
            ("ede-compile-target" function (:user-visible-flag t) nil [33512 33655])
            ("ede-debug-target" function (:user-visible-flag t) nil [33657 33794])
            ("ede-run-target" function (:user-visible-flag t) nil [33796 33927])
            ("ede-make-dist" function (:user-visible-flag t) nil [33929 34102])
            ("project-interactive-select-target" function
               (:parent "ede-project-placeholder"
                :arguments ("this" "prompt"))
                nil [34494 34744])
            ("project-interactive-select-target" function
               (:parent "ede-project"
                :arguments ("this" "prompt"))
                nil [34746 35075])
            ("project-add-file" function
               (:parent "ede-project-placeholder"
                :arguments ("this" "file"))
                nil [35077 35287])
            ("project-add-file" function
               (:parent "ede-target"
                :arguments ("ot" "file"))
                nil [35289 35497])
            ("project-remove-file" function
               (:parent "ede-target"
                :arguments ("ot" "fnnd"))
                nil [35499 35704])
            ("project-edit-file-target" function
               (:parent "ede-target"
                :arguments ("ot"))
                nil [35706 35858])
            ("project-new-target" function
               (:parent "ede-project"
                :arguments ("proj" "args"))
                nil [35860 36062])
            ("project-new-target-custom" function
               (:parent "ede-project"
                :arguments ("proj"))
                nil [36064 36269])
            ("project-delete-target" function
               (:parent "ede-target"
                :arguments ("ot"))
                nil [36271 36444])
            ("project-compile-project" function
               (:parent "ede-project"
                :arguments ("obj" "command"))
                nil [36446 36690])
            ("project-compile-target" function
               (:parent "ede-target"
                :arguments ("obj" "command"))
                nil [36692 36935])
            ("project-debug-target" function
               (:parent "ede-target"
                :arguments ("obj"))
                nil [36937 37111])
            ("project-run-target" function
               (:parent "ede-target"
                :arguments ("obj"))
                nil [37113 37269])
            ("project-make-dist" function
               (:parent "ede-project"
                :arguments ("this"))
                nil [37271 37452])
            ("project-dist-files" function
               (:parent "ede-project"
                :arguments ("this"))
                nil [37454 37651])
            ("project-rescan" function
               (:parent "ede-project"
                :arguments ("this"))
                nil [37653 37814])
            ("ede-ecb-project-paths" function nil nil [37816 38093])
            ("ede-add-project-to-global-list" function (:arguments ("proj")) nil [38127 38613])
            ("ede-flush-deleted-projects" function (:user-visible-flag t) nil [38615 38980])
            ("ede-load-project-file" function (:arguments ("dir" "rootreturn")) nil [38982 41234])
            ("ede-parent-project" function (:arguments ("obj")) nil [41348 42427])
            ("ede-current-project" function (:arguments ("dir")) nil [42429 42910])
            ("ede-buffer-object" function (:arguments ("buffer" "projsym")) nil [42912 44173])
            ("ede-target-in-project-p" function
               (:parent "ede-project"
                :arguments ("proj" "target"))
                nil [44175 44585])
            ("ede-target-parent" function (:arguments ("target")) nil [44587 45037])
            ("ede-find-target" function
               (:parent "ede-project"
                :arguments ("proj" "buffer"))
                nil [45039 45839])
            ("ede-target-buffer-in-sourcelist" function
               (:parent "ede-target"
                :arguments ("this" "buffer" "source"))
                nil [45841 46080])
            ("ede-buffer-mine" function
               (:parent "ede-project"
                :arguments ("this" "buffer"))
                nil [46082 46211])
            ("ede-buffer-mine" function
               (:parent "ede-target"
                :arguments ("this" "buffer"))
                nil [46213 46482])
            ("ede-project-buffers" function (:arguments ("project")) nil [46509 46890])
            ("ede-target-buffers" function (:arguments ("target")) nil [46892 47231])
            ("ede-buffers" function nil nil [47233 47491])
            ("ede-map-buffers" function (:arguments ("proc")) nil [47493 47604])
            ("ede-map-project-buffers" function
               (:parent "ede-project"
                :arguments ("this" "proc"))
                nil [47606 47771])
            ("ede-map-target-buffers" function
               (:parent "ede-target"
                :arguments ("this" "proc"))
                nil [47773 47935])
            ("ede-map-subprojects" function
               (:parent "ede-project"
                :arguments ("this" "proc"))
                nil [47963 48208])
            ("ede-map-all-subprojects" function
               (:parent "ede-project"
                :arguments ("this" "allproc"))
                nil [48210 48567])
            ("ede-map-targets" function
               (:parent "ede-project"
                :arguments ("this" "proc"))
                nil [48667 48806])
            ("ede-map-any-target-p" function
               (:parent "ede-project"
                :arguments ("this" "proc"))
                nil [48808 49036])
            ("ede-system-include-path" function
               (:parent "ede-project"
                :arguments ("this"))
                nil [49200 49316])
            ("ede-system-include-path" function
               (:parent "ede-target"
                :arguments ("this"))
                nil [49318 49433])
            ("ede-source-paths" function
               (:parent "ede-project"
                :arguments ("this" "mode"))
                nil [49435 49654])
            ("ede-apply-preprocessor-map" function nil nil [49665 50489])
            ("ede-system-include-path" function
               (:parent "ede-project"
                :arguments ("this"))
                nil [50491 50607])
            ("ede-preprocessor-map" function
               (:parent "ede-project"
                :arguments ("this"))
                nil [50609 50716])
            ("ede-preprocessor-map" function
               (:parent "ede-target"
                :arguments ("this"))
                nil [50718 50824])
            ("ede-java-classpath" function
               (:parent "ede-project"
                :arguments ("this"))
                nil [50834 50976])
            ("ede-set" function
               (:user-visible-flag t
                :arguments ("variable" "value" "proj"))
                nil [51009 51678])
            ("ede-apply-project-local-variables" function (:arguments ("buffer")) nil [51680 52128])
            ("ede-make-project-local-variable" function (:arguments ("variable" "project")) nil [52130 52452])
            ("ede-set-project-local-variable" function (:arguments ("variable" "value" "project")) nil [52454 52976])
            ("ede-set-project-variables" function
               (:parent "ede-project"
                :arguments ("project" "buffer"))
                nil [52978 53296])
            ("ede-commit-local-variables" function
               (:parent "ede-project"
                :arguments ("proj"))
                nil [53298 53409])
            ("ede" package nil nil [53411 53425])
            ("ede/files" include nil nil [53475 53495])
            ("if" code nil nil [53581 53694]))          
      :file "ede.el"
      :pointmax 53717
      :fsize 53716
      :lastmodtime '(20824 29944 0 0)
      :unmatched-syntax '((close-paren 16130 . 16131) (symbol 16040 . 16056) (open-paren 16039 . 16040)))
    (semanticdb-table "cedet.el"
      :file "cedet.el"
      :fsize 5049
      :lastmodtime '(20982 50852 0 0))
    (semanticdb-table "mode-local.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [1786 1799])
            ("mode-local-map-file-buffers" function (:arguments ("function" "predicate" "buffers")) nil [1824 2498])
            ("get-mode-local-parent" function (:arguments ("mode")) nil [2500 2699])
            ("mode-local-equivalent-mode-p" function (:arguments ("mode")) nil [2835 3079])
            ("mode-local-map-mode-buffers" function (:arguments ("function" "modes")) nil [3081 3551])
            ("mode-local-init-hook" variable nil nil [3576 3711])
            ("mode-local-changed-mode-buffers" variable nil nil [3713 3818])
            ("mode-local--init-mode" variable nil nil [3820 3854])
            ("mode-local-initialized-p" function nil nil [3856 4116])
            ("mode-local-post-major-mode-change" function nil nil [4118 4724])
            ("mode-local-on-major-mode-change" function nil nil [4726 4956])
            ("set-mode-local-parent" function (:arguments ("mode" "parent")) nil [4979 5474])
            ("define-child-mode" function (:arguments ("mode" "parent" "docstring")) nil [5476 5760])
            ("mode-local-use-bindings-p" function (:arguments ("this-mode" "desired-mode")) nil [5762 6054])
            ("mode-local-symbol-table" variable nil nil [6083 6290])
            ("make-variable-buffer-local" code nil nil [6291 6344])
            ("mode-local-active-mode" variable nil nil [6346 6426])
            ("new-mode-local-bindings" function nil nil [6428 6537])
            ("mode-local-bind" function (:arguments ("bindings" "plist" "mode")) nil [6539 9652])
            ("mode-local-symbol" function (:arguments ("symbol" "mode")) nil [9654 10538])
            ("mode-local-symbol-value" function (:arguments ("symbol" "mode" "property")) nil [10540 11114])
            ("activate-mode-local-bindings" function (:arguments ("mode")) nil [11145 12889])
            ("deactivate-mode-local-bindings" function (:arguments ("mode")) nil [12891 13567])
            ("with-mode-local-symbol" function (:arguments ("mode" "body")) nil [13569 14965])
            ("put" code nil nil [14966 15019])
            ("with-mode-local" function (:arguments ("mode" "body")) nil [15021 15404])
            ("put" code nil nil [15405 15451])
            ("mode-local-value" function (:arguments ("mode" "sym")) nil [15454 15650])
            ("setq-mode-local" function (:arguments ("mode" "args")) nil [15652 16817])
            ("defvar-mode-local" function (:arguments ("mode" "sym" "val" "docstring")) nil [16819 17106])
            ("put" code nil nil [17107 17160])
            ("defconst-mode-local" function (:arguments ("mode" "sym" "val" "docstring")) nil [17162 17549])
            ("put" code nil nil [17550 17605])
            ("make-obsolete-overload" function (:arguments ("old" "new" "when")) nil [17636 17959])
            ("overload-obsoleted-by" function (:arguments ("overload")) nil [17961 18139])
            ("overload-that-obsolete" function (:arguments ("overload")) nil [18141 18341])
            ("fetch-overload" function (:arguments ("overload")) nil [18343 18832])
            ("mode-local--override" function (:arguments ("name" "args" "body")) nil [18834 19512])
            ("mode-local--expand-overrides" function (:arguments ("name" "args" "body")) nil [19514 20413])
            ("mode-local--overload-body" function (:arguments ("name" "args" "body")) nil [20415 20808])
            ("put" code nil nil [20825 20878])
            ("define-overloadable-function" function (:arguments ("name" "args" "docstring" "body")) nil [20880 22190])
            ("put" code nil nil [22191 22240])
            ("defalias" code nil nil [22242 22299])
            ("function-overload-p" function (:arguments ("symbol")) nil [22301 22474])
            ("define-mode-local-override" function (:arguments ("name" "mode" "args" "docstring" "body")) nil [22476 23432])
            ("mode-local-read-function" function (:arguments ("prompt" "initial" "hist" "default")) nil [23458 23744])
            ("overload-docstring-extension" function (:arguments ("overload")) nil [23767 24416])
            ("mode-local-augment-function-help" function (:arguments ("symbol")) nil [24418 24949])
            ("mode-local-print-binding" function (:arguments ("symbol")) nil [24984 25379])
            ("mode-local-print-bindings" function (:arguments ("table")) nil [25381 26610])
            ("mode-local-describe-bindings-2" function (:arguments ("buffer-or-mode")) nil [26612 27532])
            ("mode-local-describe-bindings-1" function (:arguments ("buffer-or-mode" "interactive-p")) nil [27534 28451])
            ("describe-mode-local-bindings" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [28453 28685])
            ("describe-mode-local-bindings-in-mode" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [28687 29074])
            ("mode-local-setup-edebug-specs" function nil nil [29699 30306])
            ("add-hook" code nil nil [30308 30368])
            ("add-hook" code nil nil [30370 30431])
            ("add-hook" code nil nil [30432 30499])
            ("mode-local" package nil nil [30501 30522]))          
      :file "mode-local.el"
      :pointmax 30552
      :fsize 30551
      :lastmodtime '(20981 1996 0 0)
      :unmatched-syntax '((close-paren 1799 . 1800) (symbol 1768 . 1785) (open-paren 1767 . 1768))))
  :file "!home!masahiko!.emacs.d!cedet-bzr!trunk!lisp!cedet!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
